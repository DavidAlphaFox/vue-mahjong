
-module(message_code).
-export([encode/1, decode/1,
         encode_msg_bin/1, merge_bin/2,
         decode_msg_bin/2, split_bin/1]).
-include_lib("eunit/include/eunit.hrl").
-include_lib("protob/include/p01_login_pb.hrl").
-include_lib("protob/include/p02_room_pb.hrl").
-include_lib("protob/include/p03_mahjong_fight_pb.hrl").
-include_lib("protob/include/p04_player_pb.hrl").
-include_lib("protob/include/p05_common_pb.hrl").
-include_lib("protob/include/p06_feedback_pb.hrl").
-define(INT_PROTO_ID,    16/unsigned-big-integer).
encode(#cs_login{}=Msg) -> {ok, <<101:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_cs_login(Msg)))/binary>>};
encode(#sc_login{}=Msg) -> {ok, <<102:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_sc_login(Msg)))/binary>>};
encode(#cs_login_reconnection{}=Msg) -> {ok, <<103:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_cs_login_reconnection(Msg)))/binary>>};
encode(#sc_login_reconnection{}=Msg) -> {ok, <<104:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_sc_login_reconnection(Msg)))/binary>>};
encode(#cs_login_logoff{}=Msg) -> {ok, <<105:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_cs_login_logoff(Msg)))/binary>>};
encode(#sc_login_repeat{}=Msg) -> {ok, <<106:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_sc_login_repeat(Msg)))/binary>>};
encode(#cs_login_heartbeat{}=Msg) -> {ok, <<107:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_cs_login_heartbeat(Msg)))/binary>>};
encode(#sc_login_heartbeat{}=Msg) -> {ok, <<108:?INT_PROTO_ID, (erlang:iolist_to_binary(p01_login_pb:encode_sc_login_heartbeat(Msg)))/binary>>};
encode(#cs_room_find{}=Msg) -> {ok, <<201:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_cs_room_find(Msg)))/binary>>};
encode(#sc_room_find_response{}=Msg) -> {ok, <<202:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_find_response(Msg)))/binary>>};
encode(#cs_room_quit{}=Msg) -> {ok, <<205:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_cs_room_quit(Msg)))/binary>>};
encode(#sc_room_quit_response{}=Msg) -> {ok, <<206:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_quit_response(Msg)))/binary>>};
encode(#cs_room_sit{}=Msg) -> {ok, <<207:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_cs_room_sit(Msg)))/binary>>};
encode(#sc_room_sit_response{}=Msg) -> {ok, <<208:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_sit_response(Msg)))/binary>>};
encode(#sc_room_update{}=Msg) -> {ok, <<209:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_update(Msg)))/binary>>};
encode(#sc_room_clean{}=Msg) -> {ok, <<210:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_clean(Msg)))/binary>>};
encode(#cs_room_owner_list{}=Msg) -> {ok, <<211:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_cs_room_owner_list(Msg)))/binary>>};
encode(#sc_room_owner_list_response{}=Msg) -> {ok, <<212:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_owner_list_response(Msg)))/binary>>};
encode(#cs_room_start_mahjong{}=Msg) -> {ok, <<213:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_cs_room_start_mahjong(Msg)))/binary>>};
encode(#sc_room_start_mahjong{}=Msg) -> {ok, <<214:?INT_PROTO_ID, (erlang:iolist_to_binary(p02_room_pb:encode_sc_room_start_mahjong(Msg)))/binary>>};
encode(#cs_mahjong_fight_die{}=Msg) -> {ok, <<301:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_die(Msg)))/binary>>};
encode(#sc_mahjong_fight_die{}=Msg) -> {ok, <<302:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_die(Msg)))/binary>>};
encode(#cs_mahjong_fight_play{}=Msg) -> {ok, <<303:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_play(Msg)))/binary>>};
encode(#cs_mahjong_fight_meld{}=Msg) -> {ok, <<304:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_meld(Msg)))/binary>>};
encode(#cs_mahjong_fight_win{}=Msg) -> {ok, <<305:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_win(Msg)))/binary>>};
encode(#sc_mahjong_fight_end{}=Msg) -> {ok, <<306:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_end(Msg)))/binary>>};
encode(#sc_mahjong_fight_info{}=Msg) -> {ok, <<307:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_info(Msg)))/binary>>};
encode(#sc_mahjong_fight_state{}=Msg) -> {ok, <<308:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_state(Msg)))/binary>>};
encode(#cs_mahjong_fight_cancel{}=Msg) -> {ok, <<309:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_cancel(Msg)))/binary>>};
encode(#cs_mahjong_fight_ready{}=Msg) -> {ok, <<310:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_ready(Msg)))/binary>>};
encode(#cs_mahjong_fight_prepare{}=Msg) -> {ok, <<311:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_prepare(Msg)))/binary>>};
encode(#sc_mahjong_fight_play{}=Msg) -> {ok, <<312:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_play(Msg)))/binary>>};
encode(#sc_mahjong_fight_win{}=Msg) -> {ok, <<313:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_win(Msg)))/binary>>};
encode(#sc_mahjong_fight_cancel{}=Msg) -> {ok, <<314:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_cancel(Msg)))/binary>>};
encode(#sc_mahjong_fight_prepare{}=Msg) -> {ok, <<315:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_prepare(Msg)))/binary>>};
encode(#sc_mahjong_fight_ready{}=Msg) -> {ok, <<316:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_ready(Msg)))/binary>>};
encode(#sc_mahjong_fight_left_time{}=Msg) -> {ok, <<317:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_left_time(Msg)))/binary>>};
encode(#cs_mahjong_fight_record{}=Msg) -> {ok, <<318:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_record(Msg)))/binary>>};
encode(#sc_mahjong_fight_record{}=Msg) -> {ok, <<319:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_record(Msg)))/binary>>};
encode(#cs_mahjong_fight_update{}=Msg) -> {ok, <<320:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_update(Msg)))/binary>>};
encode(#sc_mahjong_fight_meld{}=Msg) -> {ok, <<321:?INT_PROTO_ID, (erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_meld(Msg)))/binary>>};
encode(#sc_player_info{}=Msg) -> {ok, <<401:?INT_PROTO_ID, (erlang:iolist_to_binary(p04_player_pb:encode_sc_player_info(Msg)))/binary>>};
encode(#cs_player_recharge{}=Msg) -> {ok, <<402:?INT_PROTO_ID, (erlang:iolist_to_binary(p04_player_pb:encode_cs_player_recharge(Msg)))/binary>>};
encode(#sc_player_recharge{}=Msg) -> {ok, <<403:?INT_PROTO_ID, (erlang:iolist_to_binary(p04_player_pb:encode_sc_player_recharge(Msg)))/binary>>};
encode(#cs_query_game_statistics{}=Msg) -> {ok, <<501:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_cs_query_game_statistics(Msg)))/binary>>};
encode(#sc_query_game_statistics_response{}=Msg) -> {ok, <<502:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_sc_query_game_statistics_response(Msg)))/binary>>};
encode(#cs_query_game_record{}=Msg) -> {ok, <<503:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_cs_query_game_record(Msg)))/binary>>};
encode(#sc_query_game_record_response{}=Msg) -> {ok, <<504:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_sc_query_game_record_response(Msg)))/binary>>};
encode(#cs_query_game_find{}=Msg) -> {ok, <<505:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_cs_query_game_find(Msg)))/binary>>};
encode(#sc_query_game_find_response{}=Msg) -> {ok, <<506:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_sc_query_game_find_response(Msg)))/binary>>};
encode(#sc_common_game_init{}=Msg) -> {ok, <<507:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_sc_common_game_init(Msg)))/binary>>};
encode(#cs_common_chat{}=Msg) -> {ok, <<508:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_cs_common_chat(Msg)))/binary>>};
encode(#sc_common_chat{}=Msg) -> {ok, <<509:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_sc_common_chat(Msg)))/binary>>};
encode(#sc_common_notice{}=Msg) -> {ok, <<510:?INT_PROTO_ID, (erlang:iolist_to_binary(p05_common_pb:encode_sc_common_notice(Msg)))/binary>>};
encode(#cs_feedback_fill{}=Msg) -> {ok, <<601:?INT_PROTO_ID, (erlang:iolist_to_binary(p06_feedback_pb:encode_cs_feedback_fill(Msg)))/binary>>};
encode(#sc_feedback_fill{}=Msg) -> {ok, <<602:?INT_PROTO_ID, (erlang:iolist_to_binary(p06_feedback_pb:encode_sc_feedback_fill(Msg)))/binary>>};
encode(_) -> error.
decode(<<101:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_cs_login(B)};
decode(<<102:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_sc_login(B)};
decode(<<103:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_cs_login_reconnection(B)};
decode(<<104:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_sc_login_reconnection(B)};
decode(<<105:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_cs_login_logoff(B)};
decode(<<106:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_sc_login_repeat(B)};
decode(<<107:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_cs_login_heartbeat(B)};
decode(<<108:?INT_PROTO_ID, B/binary>>) -> {ok, p01_login_pb:decode_sc_login_heartbeat(B)};
decode(<<201:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_cs_room_find(B)};
decode(<<202:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_find_response(B)};
decode(<<205:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_cs_room_quit(B)};
decode(<<206:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_quit_response(B)};
decode(<<207:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_cs_room_sit(B)};
decode(<<208:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_sit_response(B)};
decode(<<209:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_update(B)};
decode(<<210:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_clean(B)};
decode(<<211:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_cs_room_owner_list(B)};
decode(<<212:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_owner_list_response(B)};
decode(<<213:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_cs_room_start_mahjong(B)};
decode(<<214:?INT_PROTO_ID, B/binary>>) -> {ok, p02_room_pb:decode_sc_room_start_mahjong(B)};
decode(<<301:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_die(B)};
decode(<<302:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_die(B)};
decode(<<303:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_play(B)};
decode(<<304:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_meld(B)};
decode(<<305:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_win(B)};
decode(<<306:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_end(B)};
decode(<<307:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_info(B)};
decode(<<308:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_state(B)};
decode(<<309:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_cancel(B)};
decode(<<310:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_ready(B)};
decode(<<311:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_prepare(B)};
decode(<<312:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_play(B)};
decode(<<313:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_win(B)};
decode(<<314:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_cancel(B)};
decode(<<315:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_prepare(B)};
decode(<<316:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_ready(B)};
decode(<<317:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_left_time(B)};
decode(<<318:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_record(B)};
decode(<<319:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_record(B)};
decode(<<320:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_update(B)};
decode(<<321:?INT_PROTO_ID, B/binary>>) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_meld(B)};
decode(<<401:?INT_PROTO_ID, B/binary>>) -> {ok, p04_player_pb:decode_sc_player_info(B)};
decode(<<402:?INT_PROTO_ID, B/binary>>) -> {ok, p04_player_pb:decode_cs_player_recharge(B)};
decode(<<403:?INT_PROTO_ID, B/binary>>) -> {ok, p04_player_pb:decode_sc_player_recharge(B)};
decode(<<501:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_cs_query_game_statistics(B)};
decode(<<502:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_sc_query_game_statistics_response(B)};
decode(<<503:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_cs_query_game_record(B)};
decode(<<504:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_sc_query_game_record_response(B)};
decode(<<505:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_cs_query_game_find(B)};
decode(<<506:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_sc_query_game_find_response(B)};
decode(<<507:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_sc_common_game_init(B)};
decode(<<508:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_cs_common_chat(B)};
decode(<<509:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_sc_common_chat(B)};
decode(<<510:?INT_PROTO_ID, B/binary>>) -> {ok, p05_common_pb:decode_sc_common_notice(B)};
decode(<<601:?INT_PROTO_ID, B/binary>>) -> {ok, p06_feedback_pb:decode_cs_feedback_fill(B)};
decode(<<602:?INT_PROTO_ID, B/binary>>) -> {ok, p06_feedback_pb:decode_sc_feedback_fill(B)};
decode(_) -> error.
encode_msg_bin(#cs_login{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_cs_login(Msg))};
encode_msg_bin(#sc_login{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_sc_login(Msg))};
encode_msg_bin(#cs_login_reconnection{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_cs_login_reconnection(Msg))};
encode_msg_bin(#sc_login_reconnection{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_sc_login_reconnection(Msg))};
encode_msg_bin(#cs_login_logoff{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_cs_login_logoff(Msg))};
encode_msg_bin(#sc_login_repeat{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_sc_login_repeat(Msg))};
encode_msg_bin(#cs_login_heartbeat{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_cs_login_heartbeat(Msg))};
encode_msg_bin(#sc_login_heartbeat{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p01_login_pb:encode_sc_login_heartbeat(Msg))};
encode_msg_bin(#cs_room_find{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_cs_room_find(Msg))};
encode_msg_bin(#sc_room_find_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_find_response(Msg))};
encode_msg_bin(#cs_room_quit{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_cs_room_quit(Msg))};
encode_msg_bin(#sc_room_quit_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_quit_response(Msg))};
encode_msg_bin(#cs_room_sit{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_cs_room_sit(Msg))};
encode_msg_bin(#sc_room_sit_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_sit_response(Msg))};
encode_msg_bin(#sc_room_update{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_update(Msg))};
encode_msg_bin(#sc_room_clean{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_clean(Msg))};
encode_msg_bin(#cs_room_owner_list{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_cs_room_owner_list(Msg))};
encode_msg_bin(#sc_room_owner_list_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_owner_list_response(Msg))};
encode_msg_bin(#cs_room_start_mahjong{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_cs_room_start_mahjong(Msg))};
encode_msg_bin(#sc_room_start_mahjong{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p02_room_pb:encode_sc_room_start_mahjong(Msg))};
encode_msg_bin(#cs_mahjong_fight_die{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_die(Msg))};
encode_msg_bin(#sc_mahjong_fight_die{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_die(Msg))};
encode_msg_bin(#cs_mahjong_fight_play{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_play(Msg))};
encode_msg_bin(#cs_mahjong_fight_meld{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_meld(Msg))};
encode_msg_bin(#cs_mahjong_fight_win{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_win(Msg))};
encode_msg_bin(#sc_mahjong_fight_end{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_end(Msg))};
encode_msg_bin(#sc_mahjong_fight_info{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_info(Msg))};
encode_msg_bin(#sc_mahjong_fight_state{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_state(Msg))};
encode_msg_bin(#cs_mahjong_fight_cancel{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_cancel(Msg))};
encode_msg_bin(#cs_mahjong_fight_ready{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_ready(Msg))};
encode_msg_bin(#cs_mahjong_fight_prepare{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_prepare(Msg))};
encode_msg_bin(#sc_mahjong_fight_play{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_play(Msg))};
encode_msg_bin(#sc_mahjong_fight_win{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_win(Msg))};
encode_msg_bin(#sc_mahjong_fight_cancel{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_cancel(Msg))};
encode_msg_bin(#sc_mahjong_fight_prepare{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_prepare(Msg))};
encode_msg_bin(#sc_mahjong_fight_ready{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_ready(Msg))};
encode_msg_bin(#sc_mahjong_fight_left_time{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_left_time(Msg))};
encode_msg_bin(#cs_mahjong_fight_record{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_record(Msg))};
encode_msg_bin(#sc_mahjong_fight_record{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_record(Msg))};
encode_msg_bin(#cs_mahjong_fight_update{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_cs_mahjong_fight_update(Msg))};
encode_msg_bin(#sc_mahjong_fight_meld{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p03_mahjong_fight_pb:encode_sc_mahjong_fight_meld(Msg))};
encode_msg_bin(#sc_player_info{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p04_player_pb:encode_sc_player_info(Msg))};
encode_msg_bin(#cs_player_recharge{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p04_player_pb:encode_cs_player_recharge(Msg))};
encode_msg_bin(#sc_player_recharge{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p04_player_pb:encode_sc_player_recharge(Msg))};
encode_msg_bin(#cs_query_game_statistics{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_cs_query_game_statistics(Msg))};
encode_msg_bin(#sc_query_game_statistics_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_sc_query_game_statistics_response(Msg))};
encode_msg_bin(#cs_query_game_record{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_cs_query_game_record(Msg))};
encode_msg_bin(#sc_query_game_record_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_sc_query_game_record_response(Msg))};
encode_msg_bin(#cs_query_game_find{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_cs_query_game_find(Msg))};
encode_msg_bin(#sc_query_game_find_response{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_sc_query_game_find_response(Msg))};
encode_msg_bin(#sc_common_game_init{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_sc_common_game_init(Msg))};
encode_msg_bin(#cs_common_chat{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_cs_common_chat(Msg))};
encode_msg_bin(#sc_common_chat{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_sc_common_chat(Msg))};
encode_msg_bin(#sc_common_notice{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p05_common_pb:encode_sc_common_notice(Msg))};
encode_msg_bin(#cs_feedback_fill{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p06_feedback_pb:encode_cs_feedback_fill(Msg))};
encode_msg_bin(#sc_feedback_fill{}=Msg) -> {ok, 0, 0, erlang:iolist_to_binary(p06_feedback_pb:encode_sc_feedback_fill(Msg))};
encode_msg_bin(_) -> error.
merge_bin(#cs_login{}=_Msg, MsgBin) -> {ok, <<101:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_login{}=_Msg, MsgBin) -> {ok, <<102:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_login_reconnection{}=_Msg, MsgBin) -> {ok, <<103:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_login_reconnection{}=_Msg, MsgBin) -> {ok, <<104:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_login_logoff{}=_Msg, MsgBin) -> {ok, <<105:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_login_repeat{}=_Msg, MsgBin) -> {ok, <<106:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_login_heartbeat{}=_Msg, MsgBin) -> {ok, <<107:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_login_heartbeat{}=_Msg, MsgBin) -> {ok, <<108:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_room_find{}=_Msg, MsgBin) -> {ok, <<201:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_find_response{}=_Msg, MsgBin) -> {ok, <<202:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_room_quit{}=_Msg, MsgBin) -> {ok, <<205:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_quit_response{}=_Msg, MsgBin) -> {ok, <<206:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_room_sit{}=_Msg, MsgBin) -> {ok, <<207:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_sit_response{}=_Msg, MsgBin) -> {ok, <<208:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_update{}=_Msg, MsgBin) -> {ok, <<209:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_clean{}=_Msg, MsgBin) -> {ok, <<210:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_room_owner_list{}=_Msg, MsgBin) -> {ok, <<211:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_owner_list_response{}=_Msg, MsgBin) -> {ok, <<212:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_room_start_mahjong{}=_Msg, MsgBin) -> {ok, <<213:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_room_start_mahjong{}=_Msg, MsgBin) -> {ok, <<214:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_die{}=_Msg, MsgBin) -> {ok, <<301:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_die{}=_Msg, MsgBin) -> {ok, <<302:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_play{}=_Msg, MsgBin) -> {ok, <<303:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_meld{}=_Msg, MsgBin) -> {ok, <<304:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_win{}=_Msg, MsgBin) -> {ok, <<305:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_end{}=_Msg, MsgBin) -> {ok, <<306:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_info{}=_Msg, MsgBin) -> {ok, <<307:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_state{}=_Msg, MsgBin) -> {ok, <<308:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_cancel{}=_Msg, MsgBin) -> {ok, <<309:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_ready{}=_Msg, MsgBin) -> {ok, <<310:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_prepare{}=_Msg, MsgBin) -> {ok, <<311:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_play{}=_Msg, MsgBin) -> {ok, <<312:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_win{}=_Msg, MsgBin) -> {ok, <<313:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_cancel{}=_Msg, MsgBin) -> {ok, <<314:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_prepare{}=_Msg, MsgBin) -> {ok, <<315:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_ready{}=_Msg, MsgBin) -> {ok, <<316:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_left_time{}=_Msg, MsgBin) -> {ok, <<317:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_record{}=_Msg, MsgBin) -> {ok, <<318:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_record{}=_Msg, MsgBin) -> {ok, <<319:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_mahjong_fight_update{}=_Msg, MsgBin) -> {ok, <<320:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_mahjong_fight_meld{}=_Msg, MsgBin) -> {ok, <<321:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_player_info{}=_Msg, MsgBin) -> {ok, <<401:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_player_recharge{}=_Msg, MsgBin) -> {ok, <<402:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_player_recharge{}=_Msg, MsgBin) -> {ok, <<403:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_query_game_statistics{}=_Msg, MsgBin) -> {ok, <<501:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_query_game_statistics_response{}=_Msg, MsgBin) -> {ok, <<502:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_query_game_record{}=_Msg, MsgBin) -> {ok, <<503:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_query_game_record_response{}=_Msg, MsgBin) -> {ok, <<504:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_query_game_find{}=_Msg, MsgBin) -> {ok, <<505:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_query_game_find_response{}=_Msg, MsgBin) -> {ok, <<506:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_common_game_init{}=_Msg, MsgBin) -> {ok, <<507:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_common_chat{}=_Msg, MsgBin) -> {ok, <<508:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_common_chat{}=_Msg, MsgBin) -> {ok, <<509:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_common_notice{}=_Msg, MsgBin) -> {ok, <<510:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#cs_feedback_fill{}=_Msg, MsgBin) -> {ok, <<601:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(#sc_feedback_fill{}=_Msg, MsgBin) -> {ok, <<602:?INT_PROTO_ID, MsgBin/binary>>};
merge_bin(_, _) -> error.
decode_msg_bin(101, MsgBin) -> {ok, p01_login_pb:decode_cs_login(MsgBin)};
decode_msg_bin(102, MsgBin) -> {ok, p01_login_pb:decode_sc_login(MsgBin)};
decode_msg_bin(103, MsgBin) -> {ok, p01_login_pb:decode_cs_login_reconnection(MsgBin)};
decode_msg_bin(104, MsgBin) -> {ok, p01_login_pb:decode_sc_login_reconnection(MsgBin)};
decode_msg_bin(105, MsgBin) -> {ok, p01_login_pb:decode_cs_login_logoff(MsgBin)};
decode_msg_bin(106, MsgBin) -> {ok, p01_login_pb:decode_sc_login_repeat(MsgBin)};
decode_msg_bin(107, MsgBin) -> {ok, p01_login_pb:decode_cs_login_heartbeat(MsgBin)};
decode_msg_bin(108, MsgBin) -> {ok, p01_login_pb:decode_sc_login_heartbeat(MsgBin)};
decode_msg_bin(201, MsgBin) -> {ok, p02_room_pb:decode_cs_room_find(MsgBin)};
decode_msg_bin(202, MsgBin) -> {ok, p02_room_pb:decode_sc_room_find_response(MsgBin)};
decode_msg_bin(205, MsgBin) -> {ok, p02_room_pb:decode_cs_room_quit(MsgBin)};
decode_msg_bin(206, MsgBin) -> {ok, p02_room_pb:decode_sc_room_quit_response(MsgBin)};
decode_msg_bin(207, MsgBin) -> {ok, p02_room_pb:decode_cs_room_sit(MsgBin)};
decode_msg_bin(208, MsgBin) -> {ok, p02_room_pb:decode_sc_room_sit_response(MsgBin)};
decode_msg_bin(209, MsgBin) -> {ok, p02_room_pb:decode_sc_room_update(MsgBin)};
decode_msg_bin(210, MsgBin) -> {ok, p02_room_pb:decode_sc_room_clean(MsgBin)};
decode_msg_bin(211, MsgBin) -> {ok, p02_room_pb:decode_cs_room_owner_list(MsgBin)};
decode_msg_bin(212, MsgBin) -> {ok, p02_room_pb:decode_sc_room_owner_list_response(MsgBin)};
decode_msg_bin(213, MsgBin) -> {ok, p02_room_pb:decode_cs_room_start_mahjong(MsgBin)};
decode_msg_bin(214, MsgBin) -> {ok, p02_room_pb:decode_sc_room_start_mahjong(MsgBin)};
decode_msg_bin(301, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_die(MsgBin)};
decode_msg_bin(302, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_die(MsgBin)};
decode_msg_bin(303, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_play(MsgBin)};
decode_msg_bin(304, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_meld(MsgBin)};
decode_msg_bin(305, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_win(MsgBin)};
decode_msg_bin(306, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_end(MsgBin)};
decode_msg_bin(307, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_info(MsgBin)};
decode_msg_bin(308, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_state(MsgBin)};
decode_msg_bin(309, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_cancel(MsgBin)};
decode_msg_bin(310, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_ready(MsgBin)};
decode_msg_bin(311, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_prepare(MsgBin)};
decode_msg_bin(312, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_play(MsgBin)};
decode_msg_bin(313, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_win(MsgBin)};
decode_msg_bin(314, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_cancel(MsgBin)};
decode_msg_bin(315, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_prepare(MsgBin)};
decode_msg_bin(316, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_ready(MsgBin)};
decode_msg_bin(317, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_left_time(MsgBin)};
decode_msg_bin(318, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_record(MsgBin)};
decode_msg_bin(319, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_record(MsgBin)};
decode_msg_bin(320, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_cs_mahjong_fight_update(MsgBin)};
decode_msg_bin(321, MsgBin) -> {ok, p03_mahjong_fight_pb:decode_sc_mahjong_fight_meld(MsgBin)};
decode_msg_bin(401, MsgBin) -> {ok, p04_player_pb:decode_sc_player_info(MsgBin)};
decode_msg_bin(402, MsgBin) -> {ok, p04_player_pb:decode_cs_player_recharge(MsgBin)};
decode_msg_bin(403, MsgBin) -> {ok, p04_player_pb:decode_sc_player_recharge(MsgBin)};
decode_msg_bin(501, MsgBin) -> {ok, p05_common_pb:decode_cs_query_game_statistics(MsgBin)};
decode_msg_bin(502, MsgBin) -> {ok, p05_common_pb:decode_sc_query_game_statistics_response(MsgBin)};
decode_msg_bin(503, MsgBin) -> {ok, p05_common_pb:decode_cs_query_game_record(MsgBin)};
decode_msg_bin(504, MsgBin) -> {ok, p05_common_pb:decode_sc_query_game_record_response(MsgBin)};
decode_msg_bin(505, MsgBin) -> {ok, p05_common_pb:decode_cs_query_game_find(MsgBin)};
decode_msg_bin(506, MsgBin) -> {ok, p05_common_pb:decode_sc_query_game_find_response(MsgBin)};
decode_msg_bin(507, MsgBin) -> {ok, p05_common_pb:decode_sc_common_game_init(MsgBin)};
decode_msg_bin(508, MsgBin) -> {ok, p05_common_pb:decode_cs_common_chat(MsgBin)};
decode_msg_bin(509, MsgBin) -> {ok, p05_common_pb:decode_sc_common_chat(MsgBin)};
decode_msg_bin(510, MsgBin) -> {ok, p05_common_pb:decode_sc_common_notice(MsgBin)};
decode_msg_bin(601, MsgBin) -> {ok, p06_feedback_pb:decode_cs_feedback_fill(MsgBin)};
decode_msg_bin(602, MsgBin) -> {ok, p06_feedback_pb:decode_sc_feedback_fill(MsgBin)};
decode_msg_bin(_, _) -> error.
split_bin(<<101:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 101, 0, 0, MsgBin};
split_bin(<<102:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 102, 0, 0, MsgBin};
split_bin(<<103:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 103, 0, 0, MsgBin};
split_bin(<<104:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 104, 0, 0, MsgBin};
split_bin(<<105:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 105, 0, 0, MsgBin};
split_bin(<<106:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 106, 0, 0, MsgBin};
split_bin(<<107:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 107, 0, 0, MsgBin};
split_bin(<<108:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 108, 0, 0, MsgBin};
split_bin(<<201:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 201, 0, 0, MsgBin};
split_bin(<<202:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 202, 0, 0, MsgBin};
split_bin(<<205:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 205, 0, 0, MsgBin};
split_bin(<<206:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 206, 0, 0, MsgBin};
split_bin(<<207:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 207, 0, 0, MsgBin};
split_bin(<<208:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 208, 0, 0, MsgBin};
split_bin(<<209:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 209, 0, 0, MsgBin};
split_bin(<<210:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 210, 0, 0, MsgBin};
split_bin(<<211:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 211, 0, 0, MsgBin};
split_bin(<<212:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 212, 0, 0, MsgBin};
split_bin(<<213:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 213, 0, 0, MsgBin};
split_bin(<<214:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 214, 0, 0, MsgBin};
split_bin(<<301:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 301, 0, 0, MsgBin};
split_bin(<<302:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 302, 0, 0, MsgBin};
split_bin(<<303:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 303, 0, 0, MsgBin};
split_bin(<<304:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 304, 0, 0, MsgBin};
split_bin(<<305:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 305, 0, 0, MsgBin};
split_bin(<<306:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 306, 0, 0, MsgBin};
split_bin(<<307:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 307, 0, 0, MsgBin};
split_bin(<<308:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 308, 0, 0, MsgBin};
split_bin(<<309:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 309, 0, 0, MsgBin};
split_bin(<<310:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 310, 0, 0, MsgBin};
split_bin(<<311:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 311, 0, 0, MsgBin};
split_bin(<<312:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 312, 0, 0, MsgBin};
split_bin(<<313:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 313, 0, 0, MsgBin};
split_bin(<<314:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 314, 0, 0, MsgBin};
split_bin(<<315:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 315, 0, 0, MsgBin};
split_bin(<<316:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 316, 0, 0, MsgBin};
split_bin(<<317:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 317, 0, 0, MsgBin};
split_bin(<<318:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 318, 0, 0, MsgBin};
split_bin(<<319:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 319, 0, 0, MsgBin};
split_bin(<<320:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 320, 0, 0, MsgBin};
split_bin(<<321:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 321, 0, 0, MsgBin};
split_bin(<<401:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 401, 0, 0, MsgBin};
split_bin(<<402:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 402, 0, 0, MsgBin};
split_bin(<<403:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 403, 0, 0, MsgBin};
split_bin(<<501:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 501, 0, 0, MsgBin};
split_bin(<<502:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 502, 0, 0, MsgBin};
split_bin(<<503:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 503, 0, 0, MsgBin};
split_bin(<<504:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 504, 0, 0, MsgBin};
split_bin(<<505:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 505, 0, 0, MsgBin};
split_bin(<<506:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 506, 0, 0, MsgBin};
split_bin(<<507:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 507, 0, 0, MsgBin};
split_bin(<<508:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 508, 0, 0, MsgBin};
split_bin(<<509:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 509, 0, 0, MsgBin};
split_bin(<<510:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 510, 0, 0, MsgBin};
split_bin(<<601:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 601, 0, 0, MsgBin};
split_bin(<<602:?INT_PROTO_ID, MsgBin/binary>>) -> {ok, 602, 0, 0, MsgBin};
split_bin(_) -> error.
